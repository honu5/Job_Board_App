// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(uuid())
  email                   String             @unique
  password                String
  name                    String?
  role                    Role               @default(USER)
  profile                 Profile?
  resumes                 Resume[]
  applications            Application[]
  // Users can list skills via implicit many-to-many
  skills                  Skill[]            @relation("UserSkills")
  sharedExperiences       SharedExperience[]
  // Social feed
  posts                   Post[]
  postLikes               PostLike[]
  postComments            PostComment[]
  // Auth & recovery
  passwordResetToken      String?
  passwordResetExpiry     DateTime?
  // Email verification
  emailVerifiedAt         DateTime?
  verificationToken       String?            @unique
  verificationTokenExpiry DateTime?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  JobPost                 JobPost[]
}

model Client {
  id          String    @id @default(uuid())
  companyName String
  email       String    @unique
  password    String
  about       String?
  jobs        JobPost[]
  createdAt   DateTime  @default(now())
}

model JobPost {
  id               String        @id @default(uuid())
  // Original Client relation (optional to keep compatibility)
  client           Client?       @relation(fields: [clientId], references: [id])
  clientId         String?
  // New author referencing User with role CLIENT
  author           User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         String
  // Core fields
  title            String
  companyName      String
  description      String        @db.Text
  skills           Skill[]       @relation("JobSkills")
  workMode         WorkMode      @default(REMOTE)
  location         String?
  hoursPerWeek     Int?
  jobCategory      JobCategory?
  hireType         HireType      @default(PROJECT)
  numOpenings      Int?
  salaryRange      String?
  applicationLimit Int?
  deadline         DateTime?
  status           JobStatus     @default(OPEN)
  createdAt        DateTime      @default(now())
  applications     Application[]
}

model Application {
  id                String             @id @default(uuid())
  job               JobPost            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId             String
  applicant         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  resume            Resume?            @relation(fields: [resumeId], references: [id], onDelete: SetNull)
  resumeId          String?
  proposal          String?            @db.Text
  status            AppStatus          @default(PENDING)
  score             ApplicationScore?
  createdAt         DateTime           @default(now())
  interviewInvites  InterviewInvite[]
  interviews        Interview[]
  sharedExperiences SharedExperience[]

  // Prevent duplicate applications per user per job
  @@unique([jobId, userId])
}

model Resume {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  content      String        @db.Text // full text or URL to stored file
  parsedSkills Json?
  createdAt    DateTime      @default(now())
  applications Application[]
}

model ApplicationScore {
  id            String      @id @default(uuid())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String      @unique
  scorePercent  Int
  details       Json? // explain why points gained/lost
  attempts      Int         @default(0) // max 3 attempts allowed
  createdAt     DateTime    @default(now())
}

model InterviewInvite {
  id             String       @id @default(uuid())
  application    Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId  String
  chosenByClient Boolean      @default(true)
  options        Json // three options with times
  status         InviteStatus @default(PENDING)
  scheduledAt    DateTime?
  createdAt      DateTime     @default(now())
}

model Interview {
  id            String           @id @default(uuid())
  application   Application      @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  transcript    String?          @db.Text
  result        InterviewResult?
  createdAt     DateTime         @default(now())
}

model SharedExperience {
  id                 String      @id @default(uuid())
  fromUser           User        @relation(fields: [fromUserId], references: [id])
  fromUserId         String
  aboutApplication   Application @relation(fields: [aboutApplicationId], references: [id], onDelete: Cascade)
  aboutApplicationId String
  consented          Boolean     @default(false)
  createdAt          DateTime    @default(now())
}

model Skill {
  id    String    @id @default(uuid())
  name  String    @unique
  jobs  JobPost[] @relation("JobSkills")
  users User[]    @relation("UserSkills")
}

model Profile {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  headline       String?
  bio            String?  @db.Text
  jobTitle       String?
  avatarUrl      String?
  experiences    Json?
  achievements   Json?
  education      Json?
  projects       Json?
  links          Json?
  // Employer-specific fields
  companyName    String?
  companyWebsite String?
  companySize    String?
  industry       String?
  location       String?
  logoUrl        String?
  aboutCompany   String?  @db.Text
  hiringNeeds    Json?
  contact        Json?
  createdAt      DateTime @default(now())
}

// Social feed models
model Post {
  id        String        @id @default(uuid())
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String?       @db.Text
  mediaUrl  String?
  mediaType String? // image|video
  createdAt DateTime      @default(now())
  likes     PostLike[]
  comments  PostComment[]
}

model PostLike {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model PostComment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
}

// For logout/refresh-token revocation checks in auth flow
model RevokedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  revokedAt DateTime @default(now())
}

enum Role {
  USER
  CLIENT
  ADMIN
}

enum JobStatus {
  OPEN
  CLOSED
  REMOVED
}

enum AppStatus {
  PENDING
  SHORTLISTED
  INTERVIEW
  HIRED
  REJECTED
}

enum InviteStatus {
  PENDING
  SENT
  SCHEDULED
  DECLINED
}

enum InterviewResult {
  PASSED
  FAILED
  NO_DECISION
}

enum WorkMode {
  REMOTE
  IN_PERSON
}

enum JobCategory {
  AI
  WEB_DEVELOPMENT
  GRAPHIC_DESIGN
  DATA_SCIENCE
  MOBILE
  DEVOPS
  MARKETING
  SALES
  PRODUCT
  CUSTOMER_SUPPORT
}

enum HireType {
  PROJECT
  PERMANENT
}
